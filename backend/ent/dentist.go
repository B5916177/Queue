// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/B5916177/app/ent/dentist"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Dentist is the model entity for the Dentist schema.
type Dentist struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DentistName holds the value of the "dentist_name" field.
	DentistName string `json:"dentist_name,omitempty"`
	// DentistEmail holds the value of the "dentist_email" field.
	DentistEmail string `json:"dentist_email,omitempty"`
	// DentistPhone holds the value of the "dentist_phone" field.
	DentistPhone int `json:"dentist_phone,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DentistQuery when eager-loading is set.
	Edges DentistEdges `json:"edges"`
}

// DentistEdges holds the relations/edges for other nodes in the graph.
type DentistEdges struct {
	// Queue holds the value of the queue edge.
	Queue []*Queue
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QueueOrErr returns the Queue value or an error if the edge
// was not loaded in eager-loading.
func (e DentistEdges) QueueOrErr() ([]*Queue, error) {
	if e.loadedTypes[0] {
		return e.Queue, nil
	}
	return nil, &NotLoadedError{edge: "queue"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dentist) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // dentist_name
		&sql.NullString{}, // dentist_email
		&sql.NullInt64{},  // dentist_phone
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dentist fields.
func (d *Dentist) assignValues(values ...interface{}) error {
	if m, n := len(values), len(dentist.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field dentist_name", values[0])
	} else if value.Valid {
		d.DentistName = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field dentist_email", values[1])
	} else if value.Valid {
		d.DentistEmail = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field dentist_phone", values[2])
	} else if value.Valid {
		d.DentistPhone = int(value.Int64)
	}
	return nil
}

// QueryQueue queries the queue edge of the Dentist.
func (d *Dentist) QueryQueue() *QueueQuery {
	return (&DentistClient{config: d.config}).QueryQueue(d)
}

// Update returns a builder for updating this Dentist.
// Note that, you need to call Dentist.Unwrap() before calling this method, if this Dentist
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dentist) Update() *DentistUpdateOne {
	return (&DentistClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Dentist) Unwrap() *Dentist {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dentist is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dentist) String() string {
	var builder strings.Builder
	builder.WriteString("Dentist(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", dentist_name=")
	builder.WriteString(d.DentistName)
	builder.WriteString(", dentist_email=")
	builder.WriteString(d.DentistEmail)
	builder.WriteString(", dentist_phone=")
	builder.WriteString(fmt.Sprintf("%v", d.DentistPhone))
	builder.WriteByte(')')
	return builder.String()
}

// Dentists is a parsable slice of Dentist.
type Dentists []*Dentist

func (d Dentists) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
