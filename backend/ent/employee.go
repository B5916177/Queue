// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/B5916177/app/ent/employee"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Employee is the model entity for the Employee schema.
type Employee struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EmployeeName holds the value of the "employee_name" field.
	EmployeeName string `json:"employee_name,omitempty"`
	// EmployeeEmail holds the value of the "employee_email" field.
	EmployeeEmail string `json:"employee_email,omitempty"`
	// EmployeePassword holds the value of the "employee_password" field.
	EmployeePassword string `json:"employee_password,omitempty"`
	// EmployeePhone holds the value of the "employee_phone" field.
	EmployeePhone int `json:"employee_phone,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmployeeQuery when eager-loading is set.
	Edges EmployeeEdges `json:"edges"`
}

// EmployeeEdges holds the relations/edges for other nodes in the graph.
type EmployeeEdges struct {
	// Queue holds the value of the queue edge.
	Queue []*Queue
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QueueOrErr returns the Queue value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeEdges) QueueOrErr() ([]*Queue, error) {
	if e.loadedTypes[0] {
		return e.Queue, nil
	}
	return nil, &NotLoadedError{edge: "queue"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Employee) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // employee_name
		&sql.NullString{}, // employee_email
		&sql.NullString{}, // employee_password
		&sql.NullInt64{},  // employee_phone
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Employee fields.
func (e *Employee) assignValues(values ...interface{}) error {
	if m, n := len(values), len(employee.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	e.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field employee_name", values[0])
	} else if value.Valid {
		e.EmployeeName = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field employee_email", values[1])
	} else if value.Valid {
		e.EmployeeEmail = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field employee_password", values[2])
	} else if value.Valid {
		e.EmployeePassword = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field employee_phone", values[3])
	} else if value.Valid {
		e.EmployeePhone = int(value.Int64)
	}
	return nil
}

// QueryQueue queries the queue edge of the Employee.
func (e *Employee) QueryQueue() *QueueQuery {
	return (&EmployeeClient{config: e.config}).QueryQueue(e)
}

// Update returns a builder for updating this Employee.
// Note that, you need to call Employee.Unwrap() before calling this method, if this Employee
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Employee) Update() *EmployeeUpdateOne {
	return (&EmployeeClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Employee) Unwrap() *Employee {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Employee is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Employee) String() string {
	var builder strings.Builder
	builder.WriteString("Employee(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", employee_name=")
	builder.WriteString(e.EmployeeName)
	builder.WriteString(", employee_email=")
	builder.WriteString(e.EmployeeEmail)
	builder.WriteString(", employee_password=")
	builder.WriteString(e.EmployeePassword)
	builder.WriteString(", employee_phone=")
	builder.WriteString(fmt.Sprintf("%v", e.EmployeePhone))
	builder.WriteByte(')')
	return builder.String()
}

// Employees is a parsable slice of Employee.
type Employees []*Employee

func (e Employees) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
