// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/B5916177/app/ent/employee"
	"github.com/B5916177/app/ent/queue"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// EmployeeCreate is the builder for creating a Employee entity.
type EmployeeCreate struct {
	config
	mutation *EmployeeMutation
	hooks    []Hook
}

// SetEmployeeName sets the employee_name field.
func (ec *EmployeeCreate) SetEmployeeName(s string) *EmployeeCreate {
	ec.mutation.SetEmployeeName(s)
	return ec
}

// SetEmployeeEmail sets the employee_email field.
func (ec *EmployeeCreate) SetEmployeeEmail(s string) *EmployeeCreate {
	ec.mutation.SetEmployeeEmail(s)
	return ec
}

// SetEmployeePassword sets the employee_password field.
func (ec *EmployeeCreate) SetEmployeePassword(s string) *EmployeeCreate {
	ec.mutation.SetEmployeePassword(s)
	return ec
}

// SetEmployeePhone sets the employee_phone field.
func (ec *EmployeeCreate) SetEmployeePhone(i int) *EmployeeCreate {
	ec.mutation.SetEmployeePhone(i)
	return ec
}

// AddQueueIDs adds the queue edge to Queue by ids.
func (ec *EmployeeCreate) AddQueueIDs(ids ...int) *EmployeeCreate {
	ec.mutation.AddQueueIDs(ids...)
	return ec
}

// AddQueue adds the queue edges to Queue.
func (ec *EmployeeCreate) AddQueue(q ...*Queue) *EmployeeCreate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ec.AddQueueIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (ec *EmployeeCreate) Mutation() *EmployeeMutation {
	return ec.mutation
}

// Save creates the Employee in the database.
func (ec *EmployeeCreate) Save(ctx context.Context) (*Employee, error) {
	if _, ok := ec.mutation.EmployeeName(); !ok {
		return nil, &ValidationError{Name: "employee_name", err: errors.New("ent: missing required field \"employee_name\"")}
	}
	if v, ok := ec.mutation.EmployeeName(); ok {
		if err := employee.EmployeeNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "employee_name", err: fmt.Errorf("ent: validator failed for field \"employee_name\": %w", err)}
		}
	}
	if _, ok := ec.mutation.EmployeeEmail(); !ok {
		return nil, &ValidationError{Name: "employee_email", err: errors.New("ent: missing required field \"employee_email\"")}
	}
	if _, ok := ec.mutation.EmployeePassword(); !ok {
		return nil, &ValidationError{Name: "employee_password", err: errors.New("ent: missing required field \"employee_password\"")}
	}
	if _, ok := ec.mutation.EmployeePhone(); !ok {
		return nil, &ValidationError{Name: "employee_phone", err: errors.New("ent: missing required field \"employee_phone\"")}
	}
	if v, ok := ec.mutation.EmployeePhone(); ok {
		if err := employee.EmployeePhoneValidator(v); err != nil {
			return nil, &ValidationError{Name: "employee_phone", err: fmt.Errorf("ent: validator failed for field \"employee_phone\": %w", err)}
		}
	}
	var (
		err  error
		node *Employee
	)
	if len(ec.hooks) == 0 {
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmployeeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ec.mutation = mutation
			node, err = ec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EmployeeCreate) SaveX(ctx context.Context) *Employee {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ec *EmployeeCreate) sqlSave(ctx context.Context) (*Employee, error) {
	e, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	e.ID = int(id)
	return e, nil
}

func (ec *EmployeeCreate) createSpec() (*Employee, *sqlgraph.CreateSpec) {
	var (
		e     = &Employee{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: employee.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: employee.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.EmployeeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEmployeeName,
		})
		e.EmployeeName = value
	}
	if value, ok := ec.mutation.EmployeeEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEmployeeEmail,
		})
		e.EmployeeEmail = value
	}
	if value, ok := ec.mutation.EmployeePassword(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEmployeePassword,
		})
		e.EmployeePassword = value
	}
	if value, ok := ec.mutation.EmployeePhone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: employee.FieldEmployeePhone,
		})
		e.EmployeePhone = value
	}
	if nodes := ec.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.QueueTable,
			Columns: []string{employee.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return e, _spec
}
